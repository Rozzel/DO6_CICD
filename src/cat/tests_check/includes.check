#include "cat.h"

/** @cond */
int s21_cat(int argc, char *argv[]) {
  struct options flag = process_options(argc, argv);
  int startFiles = find_first_file(argc, argv);

  process_files(flag, argc, argv, startFiles);

  return 0;
}
/** @endcond */

/**
 * @brief Клонирует строку.
 *
 * Функция выделяет память под новую строку того же размера, что и s, копирует в неё содержимое s, включая терминальный нулевой символ, и возвращает указатель на новую строку.
 * @param s Указатель на строку, которую необходимо склонировать.
 * @return Указатель на новую строку в случае успеха или NULL, если не удалось выделить память.
 */
char* s21_strdup(const char* s) {
    size_t len = strlen(s) + 1;
    char* new = malloc(len);
    if (new == NULL) return NULL;
    memcpy(new, s, len);
    return new;
}

/**
 * @brief Тестирует поведение функции s21_cat по сравнению с оригинальной утилитой cat UNIX.
 *
 * Функция выполняет запуск кастомной реализации команды cat (s21_cat) и стандартной команды cat с переданными флагами,
 * затем сравнивает вывод обеих команд, используя утилиту diff. Это позволяет проверить корректность работы
 * реализации s21_cat на соответствие стандартному поведению cat.
 * @param flags Строка, содержащая флаги, которые будут использованы при вызове s21_cat и оригинального cat.
 *              Флаги должны быть представлены в формате строки, разделенной пробелами, например, "-n -E".
 *              Каждый флаг обрабатывается и добавляется в массив аргументов командной строки отдельно.
 *
 * Последовательность действий включает в себя:
 * - Разделение строки флагов на отдельные элементы и формирование аргументов командной строки.
 * - Перенаправление стандартного вывода во временный файл и выполнение s21_cat.
 * - Выполнение оригинального cat с теми же флагами и перенаправление его вывода в другой временный файл.
 * - Сравнение содержимого обоих временных файлов с помощью diff.
 * - Вывод сообщения об ошибке, если содержимое файлов различается.
 * - Удаление временных файлов после сравнения.
 *
 * @note Для корректной работы функции необходима реализация функции s21_cat и доступность системных вызовов cat и diff.
 */
void test_cat(const char* flags) {
  const char* resultS21 = "temp_s21.txt";
  const char* resultOrig = "temp_orig.txt";
  const char* testFile = "./tests_check/files/ascii.txt";

  // Подготовка аргументов командной строки с учетом раздельных флагов
  char* argv[64];
  int argc = 1;
  argv[0] = "./s21_cat";
  
  // Разделение строки flags на отдельные флаги и добавление их в argv
  // Создаем копию строки флагов, так как strtok модифицирует исходную строку
  char* flagsCopy = s21_strdup(flags);
  char* token = strtok(flagsCopy, " ");
  while (token != NULL) {
    argv[argc++] = token;
    token = strtok(NULL, " ");
  }

  // Добавление имени файла как последнего аргумента
  argv[argc++] = (char*)testFile;
  // NULL-терминатор для массива аргументов
  argv[argc] = NULL;

  // Перенаправление stdout в файл для s21_cat
  (void)freopen(resultS21, "w", stdout);
  s21_cat(argc, argv);
  fclose(stdout);
  free(flagsCopy);

  // Оригинальный cat
  char cmd_orig[1024];
  snprintf(cmd_orig, sizeof(cmd_orig), "cat %s %s > %s", flags, testFile, resultOrig);
  system(cmd_orig);

  // Использование утилиты diff для сравнения файлов
  char cmd_diff[1024];
  snprintf(cmd_diff, sizeof(cmd_diff), "diff %s %s", resultS21, resultOrig);
  int diff_result = system(cmd_diff);
  ck_assert_msg(diff_result == 0, "Outputs of s21_cat with flags '%s' and original cat are different", flags);

  // Удаление временных файлов
  unlink(resultS21);
  unlink(resultOrig);
}
